## System calls and IPC


### About Env
用户进程在`user/`下的文件定义. 由`user/Makefrag`文件可知用户进程的运行原理:   
1. 源文件(如`hello.c`)编译成目标文件(`hello.o`)  
2. 将其与`entry.S`汇编成的目标文件`entry.o`以及一些用户进程中通用的函数(`fork.o,ipc.o,libos.o,pgfault.o,printf.o,string.o,syscall.o`)等ld为"可执行文件"(`hello.b`)   
3. `bintoc`将该可执行文件转变成c源文件(`hello.b.c`): 将二进制形式转化成 char , 并且定义符号(`binary_user_hello_start`,`binary_user_hello_size`, `在ENV_CREATE`宏中用)   
4. 编译成可以被ld使用的文件(hello, 内有符号`binary_user_hello_start`, `binary_user_hello_size`)  
5. 用户程序被ld到内核中, ld会根据内核的`ENV_CREATE`查找符号(如`binary_user_hello_start`等).

由上面所述的过程可知, 当一个用户进程被运行时, 它首先执行`user/entry.S`中的代码为程序做一些初始设置.
然后调用`user/libos.c`中的`libmain()`, 该函数调用相应的用户程序的`umain()`.

注意: 每个程序都有自己独立的`entry.S`. 同样, 每个程序也都有自己的`libos.c`中的内容  
因此，每个进程都有一个变量`env`指向自己的进程控制块(`user/libos.c`), 并且每个进程都有一个整型变量`__pgfault_handler`  

### System calls


编写内核系统调用的dispatch函数及实现系统调用的函数并编写用户级的系统调用的接口

理解系统调用的过程:   
1. 在用户的程序中, 调用系统调用接口(例如`sys_getenvid`), 实际上是调用了`user/syscall.c`中相应的函数(根据Makefile)  
2. 相应的函数调用`user/syscall.c`中的`syscall()`, 该函数是用户通向内核的接口  
3. `syscall()`将参数放到相应的寄存器(`system call number`: %eax; arguments: %edx, %ecx, %ebx, %edi, and %esi)  
4. 执行int 0x30指令,产生一个中断.  
5. 系统根据已经设置好的idt(`kern/trap.c`), 找到idt[0x30], 执行相应的中断处理函数(`kern/locore.S`)  
6. 中断处理函数填好参数后, 调用`kern/trap.c`中`trap()`  (trap()根据中断向量号调用相应的处理函数)  
7. `trap()`使用中断的`Trapframe`中的`ebx等`做为参数, 调用`kern/syscall.c`中的`syscall()`  
8. `syscall()`根据系统调用号分派不同处理函数`kern/syscall.c`中`sys_*()`, 将该函数的返回值存放在中断的`Trapframe`的`eax`  
    
这样, 中断返回时, 从Trapframe中恢复寄存器的值, eax寄存器里就保存系统调用的返回值.
    
Note:
	interrupt 0x30 cannot be generated by hardware, 

### Interprocess communication (IPC)
如果一个进程要接收消息, 调用系统调用`sys_ipc_recv` 将其标记为正在接受消息(在进程控制块的相应的域中标记), 
然后将其标记成处于不可运行的状态.

如果一个进程要向某个进程发送消息, 调用系统调用`sys_ipc_can_send`测试一进程是否处于接收消息的状态, 如果是则将相应的消息传给它(在其进程控制块中标记,然后将其变成可运行的状态).
否则,返回值告诉调用者相应的进程不是处于接收消息的状态.

## Page fault handling from kernel and user modes

用户态产生page fault的处理过程:

每个进程都有自己的页故障处理函数. 发生页故障时, 系统会进入中断处理的过程:    
1. 硬件系统会将产生故障的线性地址存放在`cr2`寄存器中, 并将寄存器`ss`, `esp`,`eflags`, `cs`,`eip`压入系统栈中  
2. 同时压入栈中的还有系统产生一个错误码(Error Code), 标志故障的类型[1].  
3. 在中断描述符表(idt)中找到相应的中断描述符(idt[0xe]), 执行相应的处理函数(`kern/locaore.S`)  
4. 该函数设置好Trapframe后, 调用`kern/trap.c`中的`trap()`处理函数  
5. `trap()`在页故障时调用`kern/trap.c`中的`page_fault_handler()`  
6. `page_fault_handler()`设置用户进程的异常栈并调用用户的页故障处理函数. 
用户进程的异常栈和页故障处理函数在进程控制块中描述, 用户通过调用`set_pgfault_handler()`(`user/pgfault.c`)对其进行设置.
`set_pgfault_handler()`调用系统调用`sys_set_pgfault_handler()`.
所有用户进程的页故障处理函数的均为`entry.S`中定义的`__asm_pgfault_handler`.调用值为`__pgfault_handler`的地址处的代码


注: `__pgfault_handler`是用户进程中的一个变量. 
`set_pgfault_handler()`为进程申请异常栈空间,并调用系统调用`sys_set_pgfault_handler()`将`__asm_pgfault_handler`. 
赋予进程控制块中相应的域(env_pgfault_handler)并将其参数(一个函数)赋值给变量`__pgfault_handler`.


[1]关于页故障时的错误代码的资料
```
在地址转换过程中，如果出现下列情况之一就会引起页异常（页故障）： 
(1)涉及的页目录表内的表项或页表内的表项中的P=0，即涉及到页不在内存； 
(2)发现试图违反页保护属性的规定而对页进行访问。 

报告页异常的中断向量号是14(0EH)。 

页异常属于故障类异常。 

在进入故障处理程序时，保存的指令指针CS及EIP指向发生故障的指令。 
当页故障发生时，处理器把引起页故障的线性地址装入CR2。 
页故障还在堆栈中提供一个出错码，出错码的格式如下所示。 

15―-3 2 1 0 
 0……0 U W P 

U位表示引起故障程序的特权级. 
U=1表示用户特权级(特权级3)，U=0表示系统特权级(特权级0、1或2) 
W位表示访问类型 
W=0表示读/执行，W=1表示写. 
P位表示异常类型 
P=0表示页不存在故障，P=1表示保护故障。 
```

发生页故障时系统可能处于用户态,也可能处于内核态.
内核自身是不能发生页故障的, 所以若内核自身发生页故障, 系统应该`panic`; 

但是发生在内核态的页故障不一定是内核自身发生页故障; 
典型的情况是内核在执行用户进程的系统调用请求时发生页故障, 则说明用户进程传递的参数有问题:
比如一个不在内存中的页的地址等等; 这时是系统代表用户进程发生页故障。

`page_fault_mode()` (`kern/trap.c`)标记这两种状态.

在`kern/trap.c`的`page_fault_handler()`中, 检查Trapframe的cs域(这是发生页故障时cs寄存器的值), 
末两位11为用户态,00为内核态.

如果是在内核态时发生页故障, 检查 `page_fault_mode` 的值, 如果为`PFM_NONE`则说明内核发生页故障, `panic()`;
如果为`PFM_KILL`说明是用户进程有问题,中止当前进程的运行.

另一个问题是用户进程调用系统调用时, 可能传递给内核一个自己无权访问的地址.
因此, 用户进程传递内核的每一个地址, 都须经过`TRUP`(`inc/mmu.h`), 该宏将所有大于ULIM的值转变为ULIM, 
结合虚拟内存布局可知, 在正常的情况下, 访问ULIM会产生页故障(即使是内核),因此, 用户进程不会访问其无权访问(>=ULIM)的地址.
如果页故障发生在用户态, 则检查用户进程中实否设置了页故障处理函数; 如果用户进程没有页故障处理函数, 将进程杀死.
否则, `page_fault_handler()`的主要任务是设置用户进程的异常栈并调用用户的页故障处理函数.

用户进程的异常栈的格式如下图:

```
 	<-- env_xstacktop
empty
empty
empty
empty
empty
tf->tf_eip
tf->tf_eflags
tf->tf_esp
tf->tf_err
fault_va 	<-- %esp when handler is run
```
或：
```
 	<-- tf->esp
empty
empty
empty
empty
empty
tf->tf_eip
tf->tf_eflags
tf->tf_esp
tf->tf_err
fault_va 	<-- %esp when handler is run
```
第二种情况对应的是发生递归故障时(即页故障处理函数中又出现页故障)的情形

设置好异常栈后, 应该调用用户的页故障处理函数(`env_pgfault_handler`)  
注意: 用户进程的页故障处理函数是在用户态执行, 所以其执行完毕之后不会返回内核态.
(因为用户态切换到内核态只能通过中断, 而中断处理的流程是一致的, 并且一次中断会覆盖上一次中断保存的环境信息).
而中断从内核态返回用户态必须恢复发生中断时的环境(寄存器的值),并且这些寄存器的值不可能通过异常栈传递.

因此, 在这里还需要恢复相应寄存器的值.
一种办法是: 将异常栈的栈顶值赋给`Trapframe的esp域`, 将`env_pgfault_handler的值`赋给系统栈中的`Trapframe结构的eip域`.
然后调用`env_run()` (`kern/env.c`)来运行当前进程.  
`env_run()` 首先将系统栈中的Trapframe结构保存到当前进程的进程控制块中.  
这样, 进程控制块中的esp, eip就变成了异常栈顶与页故障处理函数的地址. 其它寄存器对应的域的值即为发生页故障时相应寄存器的值.  
然后根据当前进程的进程控制块中的寄存器对应的域的值设置寄存器. 这样, 既完成了堆栈切换与代码跳转, 又完成了环境的恢复.

当用户进程执行其页故障处理函数时, 首先执行`user/entry.S`中的`__asm_pgfault_handler`
```
 1 __asm_pgfault_handler:
 2    // save the caller-save registers
 3    movl %eax,28(%esp)
 4    movl %ecx,24(%esp)
 5    movl %edx,20(%esp)
 6
 7    // call the C page fault handler
 8    movl __pgfault_handler, %eax
 9    call *%eax
10
11    // push trap-time eip, eflags onto trap-time stack
12    movl 8(%esp),%eax  //将发生页故障时（trap-time）的esp寄存器的值赋给eax寄存器
13    movl 16(%esp),%edx //trap-time时eip寄存器的值赋给edx寄存器
14    movl %edx,-4(%eax) //保存在正常栈的下一位置
15    movl 12(%esp),%edx //trap-time时eflags寄存器的值赋给edx寄存器
16    movl %edx,-8(%eax) //保存在正常栈的下下一位置
17
18    // restore the caller-save registers
19    movl 28(%esp),%eax
20    movl 24(%esp),%ecx
21    movl 20(%esp),%edx
22
23    // switch to the trap-time stack
24    movl 8(%esp),%esp //切换至正常堆栈
25    subl $8,%esp //eflags和eip
26
27    // restore eflags and eip from the stack
28    popfl
29    ret

```
[行3-5]保存caller-saved寄存器(eax、ecx、edx),     
[行8-9]调用地址值为__pgfault_handler处的代码(即为用户写的处理函数)   
[行12-16]将发生页故障时的eip、eflags放到用户进程的(正常)栈中  
[行19-21]恢复caller-saved寄存器(eax、ecx、edx);  
[行24-25]将堆栈切换到正常堆栈.(将发生页故障时的esp寄存器的值,即tf->tf_esp赋给esp)  
[行28-29]恢复eflags(popf), 返回(ret).

在发生递归页故障(即页故障处理函数中又出现页故障)时, 异常栈的布局应该如图:
```
s	<-- env_xstacktop
empty
empty
empty
empty
empty
tf->tf_eip'
tf->tf_eflags'
tf->tf_esp'
tf->tf_err'
fault_va'	<-- %esp when handler is first run    <-- tf->esp
empty	
empty
empty
empty
empty
tf->tf_eip
tf->tf_eflags
tf->tf_esp
tf->tf_err
fault_va 	<-- %esp when handler is second run （recursive page fault）

```
发生递归页故障时, 在第二次调用的`__asm_pgfault_handler`里, "正常栈"即为异常栈.  
因此, 将发生页故障时的eip、eflags放到用户进程的正常栈中的代码[行12-16]将使用上图中标记的两个位置.

## User-level fork
`fork`的功能是产生一个当前运行进程的子进程, 该子进程是当前进程的拷贝.

#### RETURN of `fork`
`fork()`子进程中返回0,在父进程中返回子进程的id.   

`fork()`首先调用系统调用`sys_env_alloc`产生一个新的进程; `sys_env_alloc`申请一个进程控制块作为子进程的PCB,
将当前进程的PCB控制块的内容拷贝给它.除了eax对应的域, 这个域应设置成0.(**), 然后返回新创建进程的pid.   
`sys_env_alloc`执行完成后, 发生系统调用时的Trapframe的eax域为子进程id. 
当系统调用中断返回时, 从Trapframe中恢复环境, eax寄存器值为子进程id,`sys_env_alloc`的返回值.

之后在父进程中实现COW的设置, 为子进程设置页故障处理函数,将子进程设置为可运行, 并返回子进程id;

当子进程被调度,调用`env_run`函数, 从其PCB中恢复环境, eax寄存器值为0.
返回用户态时, 父进程与子进程开始时执行相同的指令, 所以eax寄存器的值都被认为是函数的返回值.

(**)  
C中函数返回值是放在eax寄存器里的

#### MEMORY
fork后两个进程不共享内存, 但不是在子进程产生之时就拷贝内存.使用COW(Copy On Write)机制, 即写时拷贝.  
由于不采用创建时拷贝物理页面的方法, 父进程创建出子进程后, 其相同的线性地址对应相同的物理页面.   
读操作不会带来什么问题, 但写操作会使物理页改变, 而父进程与子进程不共享内存页面, 因此此时必须拷贝.   

`fork()`通过系统调用`sys_env_alloc`得到一子进程后, 父进程设置物理页面的属性:    
在其地址空间内, 如果某一页面有写权限或COW权限, 去掉写权限, 加上COW权限.   
这样, 当用户进程(父进程或子进程)对某一页进行写操作时, 将发生页故障;   
其页故障处理函数可以检查该页是否有COW权限,如果有, 则将该页的内容拷贝到一新申请的物理页面中.   
然后将新页影射到原来的线性地址上. 否则即发生了错误的情况.  


## SUMMARY

### MEMROY ADDRESSING
在用户进程中访问页目录与页表是fork中的重点.
用户进程的vpd[]、vpt[]可以访问某页的页目录项和页表项.

理解这点除了要理解保护模式下的内存寻址方式外, 还要理解一个进程的虚拟内存布局以及vpd、vpt的值和意义.

`vpt`, `vpd`在`user/entry.S`中定义, vpt值为UVPT, vpd值为(UVPT+(UVPT>>12)*4).    
在`kern/env.c`的`env_setup_vm()`, 将页目录自身影射到页目录的第PDX(UVPT)项.    
这样就可以用vpd访问用户进程空间某线性地址所在页的页目录项, 可以用vpt访问用户进程空间中某线性地址所在页的页表项.   

举例如下:
设一地址va, `vpd[va/4M]`表示va所在页的页目录项. 寻址过程如下:    
为了便于叙述, 不妨设用户进程的页目录所在的物理页为PageA. 前面已经说过PageA的第PDX(UVPT)项指向PageA.   
va所在页面的页目录项为PageA的第`PDX(va)`项. vpd[va/4M]的线性地址为`vpd+4*va/4M`,   
`PDX(vpd+ 4* va/4M=PDX(UVPT)`, 因此经过一级寻址后, 得到的页表为PageA;  
`PTX(vpd+4* va/4M)=PDX(UVPT)`, 因此经过二级寻址后，得到的页面为PageA.   
页内偏移即为`PGOFF(4*va/4M)=4*va/4M`, 为其第va/4M项(vpd为整型数组);    
注意到`PDX(va)=va/4M`, 因此`vpd[va/4M]`表示va所在页的页目录项.

下面说明`vpt[va/4K]`表示va所在页面的页目录项.    
va所在页面的页目录项为PageA的第PDX(va)项所指向的页面的第PTX(va)项, 即该页中偏移为4*PTX(va)的项.   
与上面所述的过程类似, `vpt[va/4K]`线性地址为`vpt+4*va/4K`.    
`PDX(vpt+4*va/4K)=PDX(vpt)=PDX(UVPT)`, 经过一级寻址后得到页表为PageA.    
`PTX(vpt+4*va/4K)=PTX(4*va/4K)=PDX(va)`, 经过二级寻址后, 得到页面为PageA的第PDX(va)项对应的页面.   
页内偏移为`PGOFF(4*va/4K)=(va>>10)&0xfff`. `4*PTX(va)=4*(va>>12)&0x3ff` 二者是相等的.   
这就说明vpt[va/4K]表示va所在页面的页目录项。  


### CMOS
内核通过读[CMOS中的数据](CMOS.png)来得到系统拥有的内存的数量(`kern/pmap.c`中读CMOS的0x17、0x18).


## Trouble Shooting

#### Build error
`error : conflicting types for ‘bcopy’`

inc/mmu.h
```
++ #ifndef __USE_BSD
   void bcopy(const void *, void *, size_t);
   void bzero(void *, size_t);
++ #endif
```

#### Garbage in PAGE
`fork()`中父进程将已存在于自己的地址空间的内存页影射到子进程的地址空间时, 页表项的内容表明相应的页面存在但页面的物理页号被认为是非法的.
	`pgdir_walk()`中对申请的页表没有清零, 导致原来在相应的页面的内容造成错误影响.

#### a.out
注意gcc和ld的版本/参数, 其输入/输出的文件的格式(a.out)